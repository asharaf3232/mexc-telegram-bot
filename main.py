# -*- coding: utf-8 -*-

import ccxt
import pandas as pd
import pandas_ta as ta
import asyncio
import time
import os
import logging
from datetime import datetime
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

## --- ุงูุฅุนุฏุงุฏุงุช --- ##

# 1. ููุงุชูุญ ุงูููุตุฉ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ
MEXC_API_KEY = os.getenv('MEXC_API_KEY')
MEXC_SECRET_KEY = os.getenv('MEXC_API_SECRET')

# 2. ุฅุนุฏุงุฏุงุช ุจูุช ุงูุชููุฌุฑุงู
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

if not all([MEXC_API_KEY, MEXC_SECRET_KEY, TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID]):
    print("ุฎุทุฃ ูุงุฏุญ: ูุชุบูุฑ ูุงุญุฏ ุฃู ุฃูุซุฑ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ุบูุฑ ููุฌูุฏ.")
    exit()

# 3. ุฅุนุฏุงุฏุงุช ุงุณุชุฑุงุชูุฌูุฉ ุงูุชุฏุงูู ููุณุญ ุงูุณูู
TIMEFRAME = '15m'
LOOP_INTERVAL_SECONDS = 900  # 15 ุฏูููุฉ
EXCLUDED_SYMBOLS = ['BTC/USDT', 'ETH/USDT']
STABLECOINS = ['USDC', 'DAI', 'BUSD', 'TUSD', 'USDP']
PERFORMANCE_FILE = 'recommendations_log.csv'
TOP_N_SYMBOLS_BY_VOLUME = 100 # (ุฌุฏูุฏ) ุนุฏุฏ ุงูุนููุงุช ุงูุชู ุณูุชู ูุญุตูุง

# 4. ูุนุงููุฑ ุงูุงุณุชุฑุงุชูุฌูุฉ ุงููุชูุฏูุฉ
VWAP_PERIOD = 14
MACD_FAST = 12
MACD_SLOW = 26
MACD_SIGNAL = 9
BBANDS_PERIOD = 20
BBANDS_STDDEV = 2.0
RSI_PERIOD = 14
RSI_MAX_LEVEL = 68

# 5. ุฅุฏุงุฑุฉ ุงููุฎุงุทุฑ
TAKE_PROFIT_PERCENTAGE = 4.0
STOP_LOSS_PERCENTAGE = 2.0

# --- ุชููุฆุฉ ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
bot_data = {
    "exchange": None,
    "last_signal_time": {}
}

## --- ุงูุฏูุงู ุงูุฃุณุงุณูุฉ --- ##

def get_exchange_client():
    """ุชููุฆุฉ ุงูุงุชุตุงู ุจููุตุฉ MEXC."""
    try:
        exchange = ccxt.mexc({
            'apiKey': MEXC_API_KEY,
            'secret': MEXC_SECRET_KEY,
            'options': {'defaultType': 'spot'},
        })
        exchange.load_markets()
        logging.info("ุชู ุงูุงุชุตุงู ุจูุฌุงุญ ุจููุตุฉ MEXC.")
        return exchange
    except Exception as e:
        logging.error(f"ูุดู ุงูุงุชุตุงู ุจููุตุฉ MEXC: {e}")
        return None

async def get_top_movers(exchange):
    """(ุฌุฏูุฏ) ุฌูุจ ุฃูุถู ุงูุนููุงุช ูู ุญูุซ ุญุฌู ุงูุชุฏุงูู."""
    logging.info(f"ุฌุงุฑู ุฌูุจ ุฃูุถู {TOP_N_SYMBOLS_BY_VOLUME} ุนููุฉ ูู ุญูุซ ุญุฌู ุงูุชุฏุงูู...")
    try:
        tickers = exchange.fetch_tickers()
        usdt_tickers = {symbol: ticker for symbol, ticker in tickers.items() if symbol.endswith('/USDT')}
        
        # ูุฑุฒ ุงูุนููุงุช ุญุณุจ ุญุฌู ุงูุชุฏุงูู (quoteVolume)
        sorted_tickers = sorted(usdt_tickers.values(), key=lambda t: t.get('quoteVolume', 0), reverse=True)
        
        top_symbols = [t['symbol'] for t in sorted_tickers]
        
        # ููุชุฑุฉ ุงูุนููุงุช ุงููุณุชุจุนุฏุฉ ูุงููุณุชูุฑุฉ
        filtered_symbols = [s for s in top_symbols if not any(stable in s for stable in STABLECOINS)]
        final_symbols = [s for s in filtered_symbols if s not in EXCLUDED_SYMBOLS]
        
        # ุฃุฎุฐ ุฃูุถู N ุนููุฉ
        final_list = final_symbols[:TOP_N_SYMBOLS_BY_VOLUME]
        logging.info(f"ุชู ุชุญุฏูุฏ {len(final_list)} ุนููุฉ ูุดุทุฉ ูููุญุต.")
        return final_list
    except Exception as e:
        logging.error(f"ุฎุทุฃ ูู ุฌูุจ ุงูุนููุงุช ุงููุดุทุฉ: {e}")
        return []

def fetch_data(exchange, symbol, timeframe):
    """ุฌูุจ ุจูุงูุงุช ุงูุดููุน ุงูุชุงุฑูุฎูุฉ ูุนููุฉ ูุนููุฉ."""
    try:
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=150)
        if len(ohlcv) < BBANDS_PERIOD: return None
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('timestamp', inplace=True)
        return df
    except Exception as e:
        logging.warning(f"ูู ูุชููู ูู ุฌูุจ ุงูุจูุงูุงุช ูู {symbol}: {e}")
        return None

def analyze_market_data(df, symbol):
    """(ูุญุตููุฉ) ุชุทุจูู ุงูุงุณุชุฑุงุชูุฌูุฉ ุงููุชูุฏูุฉ."""
    if df is None or len(df) < BBANDS_PERIOD: return None
    try:
        df.ta.vwap(length=VWAP_PERIOD, append=True)
        df.ta.bbands(length=BBANDS_PERIOD, std=BBANDS_STDDEV, append=True)
        df.ta.macd(fast=MACD_FAST, slow=MACD_SLOW, signal=MACD_SIGNAL, append=True)
        df.ta.rsi(length=RSI_PERIOD, append=True)
        
        required_columns = [f'BBU_{BBANDS_PERIOD}_{BBANDS_STDDEV}', f'VWAP_{VWAP_PERIOD}', f'MACD_{MACD_FAST}_{MACD_SLOW}_{MACD_SIGNAL}', f'MACDs_{MACD_FAST}_{MACD_SLOW}_{MACD_SIGNAL}', f'RSI_{RSI_PERIOD}']
        if not all(col in df.columns for col in required_columns):
            return None

        last, prev = df.iloc[-2], df.iloc[-3]

        macd_crossover = prev[f'MACD_{MACD_FAST}_{MACD_SLOW}_{MACD_SIGNAL}'] <= prev[f'MACDs_{MACD_FAST}_{MACD_SLOW}_{MACD_SIGNAL}'] and last[f'MACD_{MACD_FAST}_{MACD_SLOW}_{MACD_SIGNAL}'] > last[f'MACDs_{MACD_FAST}_{MACD_SLOW}_{MACD_SIGNAL}']
        bollinger_breakout = last['close'] > last[f'BBU_{BBANDS_PERIOD}_{BBANDS_STDDEV}']
        vwap_confirmation = last['close'] > last[f'VWAP_{VWAP_PERIOD}']
        rsi_condition = last[f'RSI_{RSI_PERIOD}'] < RSI_MAX_LEVEL

        if macd_crossover and bollinger_breakout and vwap_confirmation and rsi_condition:
            entry_price = last['close']
            return {
                "symbol": symbol, "entry_price": entry_price,
                "take_profit": entry_price * (1 + TAKE_PROFIT_PERCENTAGE / 100),
                "stop_loss": entry_price * (1 - STOP_LOSS_PERCENTAGE / 100),
                "timestamp": df.index[-2], "reason": "ุชูุงุทุน MACD ูุงุฎุชุฑุงู Bollinger"
            }
    except Exception as e:
        logging.error(f"ุฎุทุฃ ุนุงู ูู ุชุญููู {symbol}: {e}")
    return None

async def send_telegram_message(bot: Bot, signal):
    message = f"""
โ *ุชูุตูุฉ ุชุฏุงูู ุฌุฏูุฏุฉ* โ
*ุงูุนููุฉ:* `{signal['symbol']}`
*ุงูุงุณุชุฑุงุชูุฌูุฉ:* `{signal['reason']}`
*ุงูุฅุฌุฑุงุก:* `ุดุฑุงุก (BUY)`
*ุณุนุฑ ุงูุฏุฎูู:* `${signal['entry_price']:,.4f}`
๐ฏ *ุฌูู ุงูุฃุฑุจุงุญ ({TAKE_PROFIT_PERCENTAGE}%):* `${signal['take_profit']:,.4f}`
๐ *ููู ุงูุฎุณุงุฑุฉ ({STOP_LOSS_PERCENTAGE}%):* `${signal['stop_loss']:,.4f}`
*ุฅุฎูุงุก ูุณุคูููุฉ: ุงูุชุฏุงูู ุนุงูู ุงููุฎุงุทุฑ.*
"""
    try:
        await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message, parse_mode=ParseMode.MARKDOWN)
        logging.info(f"ุชู ุฅุฑุณุงู ุงูุชูุตูุฉ ุจูุฌุงุญ ูุนููุฉ {signal['symbol']}.")
        log_recommendation(signal)
    except Exception as e:
        logging.error(f"ูุดู ุฅุฑุณุงู ุงูุฑุณุงูุฉ ุฅูู ุชููุฌุฑุงู: {e}")

def log_recommendation(signal):
    """ุญูุธ ุงูุชูุตูุฉ ูู ููู CSV ูุชุชุจุน ุงูุฃุฏุงุก."""
    file_exists = os.path.isfile(PERFORMANCE_FILE)
    df = pd.DataFrame([{'timestamp': signal['timestamp'], 'symbol': signal['symbol'], 'entry_price': signal['entry_price'], 'take_profit': signal['take_profit'], 'stop_loss': signal['stop_loss'], 'status': 'ูุดุทุฉ', 'exit_price': None, 'closed_at': None}])
    with open(PERFORMANCE_FILE, 'a') as f:
        df.to_csv(f, header=not file_exists, index=False, encoding='utf-8-sig')

async def perform_scan(context: ContextTypes.DEFAULT_TYPE):
    """ุชูููุฐ ุฌููุฉ ูุญุต ูุงุญุฏุฉ ููุณูู ุนูู ุงูุนููุงุช ุงููุดุทุฉ ููุท."""
    exchange = bot_data['exchange']
    last_signal_time = bot_data['last_signal_time']
    
    # (ุชุนุฏูู) ุฌูุจ ุงูุนููุงุช ุงููุดุทุฉ ูู ูู ูุฑุฉ
    symbols_to_scan = await get_top_movers(exchange)
    if not symbols_to_scan:
        logging.warning("ูู ูุชู ุงูุนุซูุฑ ุนูู ุนููุงุช ูุดุทุฉ ูููุญุต. ุณูุชู ุงูุชุฎุทู.")
        return

    found_signals = 0
    logging.info(f"ุจุฏุก ุฌููุฉ ูุญุต ุฌุฏูุฏุฉ ูู {len(symbols_to_scan)} ุนููุฉ ูุดุทุฉ...")
    for symbol in symbols_to_scan:
        df = fetch_data(exchange, symbol, TIMEFRAME)
        if df is not None:
            signal = analyze_market_data(df, symbol)
            if signal:
                current_time = time.time()
                if symbol not in last_signal_time or (current_time - last_signal_time.get(symbol, 0)) > (LOOP_INTERVAL_SECONDS * 4):
                    await send_telegram_message(context.bot, signal)
                    last_signal_time[symbol] = current_time
                    found_signals += 1
        # (ุฌุฏูุฏ) ุฅุถุงูุฉ ุงุณุชุฑุงุญุฉ ูุตูุฑุฉ ูุชุฎููู ุงูุถุบุท
        await asyncio.sleep(0.5) 
        
    logging.info(f"ุงูุชูู ุงููุญุต. ุชู ุงูุนุซูุฑ ุนูู {found_signals} ุฅุดุงุฑุฉ ุฌุฏูุฏุฉ.")

## --- ุฃูุงูุฑ ููุนุงูุฌุงุช ุชููุฌุฑุงู (ููุนุฑูุจุฉ) --- ##

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ุงูุชุนุงูู ูุน ุฃูุฑ /start ูุนุฑุถ ุงููุงุฆูุฉ ุงูุฑุฆูุณูุฉ."""
    keyboard = [["๐ ุงูุฅุญุตุงุฆูุงุช", "โน๏ธ ูุณุงุนุฏุฉ"], ["๐ ูุญุต ูุฏูู"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("ุฃููุงู ุจู! ุฃูุง ุจูุช ุงูุชุฏุงูู ุงูุฐูู. ุฃุฑุงูุจ ุงูุขู ุงูุนููุงุช ุงููุดุทุฉ ูู ุงูุณูู. ุงุณุชุฎุฏู ุงูุฃุฒุฑุงุฑ ููุชูุงุนู.", reply_markup=reply_markup)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
*ูุณุงุนุฏุฉ ุจูุช ุงูุชุฏุงูู ุงูุฐูู*
`๐ ูุญุต ูุฏูู` - ููุญุต ุฃูุถู 100 ุนููุฉ ูู ุญูุซ ุงูุณูููุฉ ููุฑุงู.
`๐ ุงูุฅุญุตุงุฆูุงุช` - ูุนุฑุถ ุฃุฏุงุก ุงูุชูุตูุงุช ุงูุณุงุจูุฉ.
`โน๏ธ ูุณุงุนุฏุฉ` - ูุนุฑุถ ูุฐู ุงูุฑุณุงูุฉ.
ูููู ุงูุจูุช ุชููุงุฆูุงู ุจูุญุต ุงูุนููุงุช ุงููุดุทุฉ ูู 15 ุฏูููุฉ.
"""
    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def manual_scan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ุงูุชุนุงูู ูุน ุทูุจ ุงููุญุต ุงููุฏูู."""
    await update.message.reply_text("๐ ุญุณูุงู! ุฌุงุฑู ูุญุต ุงูุนููุงุช ุงููุดุทุฉ ุงูุขู...")
    await perform_scan(context)
    await update.message.reply_text("โ ุงูุชูู ุงููุญุต ุงููุฏูู.")

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not os.path.exists(PERFORMANCE_FILE):
        await update.message.reply_text("ูู ูุชู ุชุณุฌูู ุฃู ุชูุตูุงุช ุจุนุฏ.")
        return
    df = pd.read_csv(PERFORMANCE_FILE)
    total_recs, active_trades = len(df), len(df[df['status'] == 'ูุดุทุฉ'])
    stats_message = f"""
*ุฅุญุตุงุฆูุงุช ุงูุฃุฏุงุก*
- *ุฅุฌูุงูู ุงูุชูุตูุงุช ุงููุฑุณูุฉ:* {total_recs}
- *ุงูุตููุงุช ุงููุดุทุฉ ุญุงููุงู:* {active_trades}
*ููุงุญุธุฉ: ูุธุงู ุชุชุจุน ูุจุณุท.*
"""
    await update.message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ุงูุชุนุงูู ูุน ุถุบุทุงุช ุงูุฃุฒุฑุงุฑ."""
    text = update.message.text
    if text == "๐ ุงูุฅุญุตุงุฆูุงุช": await stats_command(update, context)
    elif text == "โน๏ธ ูุณุงุนุฏุฉ": await help_command(update, context)
    elif text == "๐ ูุญุต ูุฏูู": await manual_scan_command(update, context)

async def post_init(application: Application):
    """ุฏุงูุฉ ุชุนูู ุจุนุฏ ุชููุฆุฉ ุงูุจูุช ูุจุงุดุฑุฉ."""
    bot_data['exchange'] = get_exchange_client()
    if not bot_data['exchange']:
        logging.error("ูู ูุชู ุงูุงุชุตุงู ุจุงูููุตุฉ. ูู ูุชููู ุงูุจูุช ูู ุงููุญุต.")
        return
    await application.bot.send_message(
        chat_id=TELEGRAM_CHAT_ID,
        text=f"๐ *ุงูุจูุช ุงูุขู ูุชุตู ูุฌุงูุฒ ููุนูู!*\n- *ุงูุงุณุชุฑุงุชูุฌูุฉ:* `ุงูููุต ุงูุฐูู (ูุญุต ุฃูุถู {TOP_N_SYMBOLS_BY_VOLUME})`",
        parse_mode=ParseMode.MARKDOWN
    )
    application.job_queue.run_repeating(perform_scan, interval=LOOP_INTERVAL_SECONDS, first=10)

## --- ุงูุชุดุบูู ุงูุฑุฆูุณู --- ##

if __name__ == '__main__':
    print("๐ ุฌุงุฑู ุจุฏุก ุชุดุบูู ุงูุจูุช...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).post_init(post_init).build()
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    print("โ ุงูุจูุช ูุนูู ุงูุขู ููุณุชูุน ููุชุญุฏูุซุงุช...")
    application.run_polling()

